<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Till's blog</title><link>http://tifrel.github.io/posts/</link><description>Recent content in Posts on Till's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://tifrel.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello, World!</title><link>http://tifrel.github.io/posts/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://tifrel.github.io/posts/hello-world/</guid><description>Welcome to my blog, where I will write about Rust, Blockchain development, probably some other nerdy stuff, and just things that spark my interest.
I am Till, and I recently made a career out of my long-held programming hobby. Since I find blockchains and everything Web3 to be fascinating technology that aligns a lot with how I feel things should be designed (decentralization, Peer-to-peer), I decided to make my entry just there and also to start blogging about what I learn.</description></item><item><title>Build on NEAR: Our first smart contract (part 1.2)</title><link>http://tifrel.github.io/posts/build-on-near-1.2/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>http://tifrel.github.io/posts/build-on-near-1.2/</guid><description>In the the last part, we explored Wasm compilation, smart contracts in general, and testing on NEAR. We&amp;rsquo;ve already written tests for our toy example of a blockchained &amp;ldquo;Buy Me A Coffee&amp;rdquo;, which is where we pick up this post.
The methods Let us start the development with the impl block, as our testing already tells us which methods are needed:
// We require `env` to interact with the rest of the NEAR world, and of course // the types as a &amp;#34;language&amp;#34; for these interactions.</description></item><item><title>Build on NEAR: Our first smart contract (part 1.1)</title><link>http://tifrel.github.io/posts/build-on-near-1.1/</link><pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate><guid>http://tifrel.github.io/posts/build-on-near-1.1/</guid><description>In the kick-off post, we explored NEAR accounts and the CLI as prerequisites for deploying smart contracts on top of the NEAR protocol. This posts goes over the facets of writing smart contracts in general and conclude with the foundations for the remainder of the series.
The actual contract will be a simple &amp;ldquo;Buy me a coffee&amp;rdquo; contract, so basically a donation of NEAR to an account that the contract has been deployed with.</description></item><item><title>Build on NEAR: Getting started (part 0)</title><link>http://tifrel.github.io/posts/build-on-near-0/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><guid>http://tifrel.github.io/posts/build-on-near-0/</guid><description>So you know how to build with Rust, or have experience with smart contracts, now you want to build on NEAR? This series is for you. I will do my best to explain blockchain concepts and advanced Rust whenever I can, and whenever I feel that it&amp;rsquo;s necessary. Following topics will be covered:
Interacting with the NEAR network, for which you will need an account and should have a look at the NEAR CLI tool (this post) Building smart contracts, testing them, and deploying them to a testing network Integration testing, storage migration, redeployments Gas costs and profiling, cross-contract calling, simulation testing, mainnet Indexing, testing the indexer, storage migrations and indexing Smart contracts standards for the NEAR ecosystem Let&amp;rsquo;s kickstart this series by getting you a NEAR account.</description></item></channel></rss>